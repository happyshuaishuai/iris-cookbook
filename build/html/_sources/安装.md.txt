# 安装

唯一的要求是[Go编程语言](https://golang.org/dl/)，至少1.8版本，但强烈建议使用1.9。

```sh
$ go get -u github.com/kataras/iris
```

> iris利用[vendor](https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo)的特性(github.com\kataras\iris\vendor)，您可以得到真正的可重复的构建，因为这种方法可以防止外部依赖包的修改和删除。

Q：Go 1.8和Go 1.9 Iris之间的主要区别是什么？

A：Go 1.9支持类型别名，iris已经为Go 1.8.3做好了工作，它有一个文件，[`kataras/iris/context.go`](https://github.com/kataras/iris/blob/master/context.go)限制对Go 1.9的构建访问，全部在同一个地方声明了iris的所有类型别名。

在Go 1.9之前，你必须导入“github.com/kataras/iris/context”来创建一个Handler：

```go
package main

import (
    "github.com/kataras/iris"
    "github.com/kataras/iris/context"
)

func main() {
    app := iris.New()
    app.Get("/", func(ctx context.Context){})
    app.Run(iris.Addr(":8080"))
}
```

从Go 1.9开始，在您不必导入之后，您可以选择性地执行此操作：

```go
package main

import "github.com/kataras/iris"


func main() {
    app := iris.New()
    app.Get("/", func(ctx iris.Context){})
    app.Run(iris.Addr(":8080"))
}
```

对于 kataras/iris/core/router/APIBuilder#PartyFunc 也是一样的

```go
//而不是导入 router package 后使用 router.Party

app.PartyFunc("/cpanel", func(child iris.Party) { 
    child.Get("/", func(ctx iris.Context){})
}
// OR
cpanel := app.Party("/cpanel")
cpanel.Get("/", func(ctx iris.Context){})
```